{"version":3,"sources":["Nav/Nav.js","Logo/Logo.js","Header/Header.js","Footer/Footer.js","Home/Home.js","Weather/Weather.js","Currency/Currency.js","Other/Other.js","App/App.js","serviceWorker.js","index.js"],"names":["Nav","className","data-text","to","React","Component","Logo","Header","Footer","Home","Weather","Currency","Other","App","props","state","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0dAyBeA,E,iLAZP,OACI,yBAAKC,UAAU,OACX,4BACI,4BAAI,kBAAC,IAAD,CAAMC,YAAU,6CAAUC,GAAG,KAA7B,+CACJ,4BAAI,kBAAC,IAAD,CAAMD,YAAU,uCAASC,GAAG,YAA5B,yCACJ,4BAAI,kBAAC,IAAD,CAAMD,YAAU,6DAAkBC,GAAG,aAArC,kE,GAbNC,IAAMC,WCgBTC,G,uLARP,OACI,kBAAC,IAAD,CACIH,GAAG,IACHF,UAAU,QAFd,Y,GATOG,IAAMC,YCkBVE,E,iLATP,OACI,4BAAQN,UAAU,UACd,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAXKG,IAAMC,WCaZG,G,uLARP,OACI,4BAAQP,UAAU,e,GATTG,IAAMC,YC0BZI,G,uLAlBP,OACI,yBAAKR,UAAU,QACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,cACX,yRAEJ,yBAAKA,UAAU,eACX,uKAEJ,yBAAKA,UAAU,cACX,oJ,GAlBLG,IAAMC,YCkBVK,G,uLAVP,OACI,yBAAKT,UAAU,WACX,yBAAKA,UAAU,mB,GAVTG,IAAMC,YCgBbM,G,uLARP,OACI,yBAAKV,UAAU,YAAf,gB,GATWG,IAAMC,YCgBdO,G,uLARP,OACI,yBAAKX,UAAU,SAAf,mC,GATQG,IAAMC,YCoCXQ,E,YA1Bb,WAAaC,GAAQ,IAAD,8BAClB,4CAAMA,KACDC,MAAQ,GAFK,E,sEAOlB,OACE,yBAAKd,UAAU,OAEX,kBAAC,EAAD,MACA,8BACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjC,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,WAAWC,UAAWR,IACxC,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,YAAYC,UAAWP,IACzC,kBAAC,IAAD,CAAOO,UAAWN,MAGxB,kBAAC,EAAD,W,GApBQR,IAAMC,WCAJc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,IAAD,SAAgB,kBAAC,EAAD,MAAhB,KAA2CC,SAASC,eAAe,SD2H7E,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f9f7da66.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Nav.scss';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Nav extends React.Component {\r\n    // constructor (props) {\r\n    //   super(props);\r\n    //   this.state = {\r\n  \r\n    //   }\r\n    // }\r\n    render() {\r\n        return (\r\n            <nav className=\"Nav\">\r\n                <ul>\r\n                    <li><Link data-text=\"Главная\" to=\"/\">Главная</Link></li>\r\n                    <li><Link data-text=\"Погода\" to=\"/weather\">Погода</Link></li>\r\n                    <li><Link data-text=\"Курс&nbsp;валют\" to=\"/currency\">Курс валют</Link></li>\r\n                </ul>\r\n            </nav>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport './Logo.scss';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Logo extends React.Component {\r\n    // constructor (props) {\r\n    //   super(props);\r\n    //   this.state = {\r\n  \r\n    //   }\r\n    // }\r\n    render() {\r\n        return (\r\n            <Link\r\n                to=\"/\"\r\n                className=\"Logo\">iOld</Link>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\nimport './Header.scss';\r\n\r\nimport Nav from '../Nav/Nav';\r\nimport Logo from '../Logo/Logo';\r\n\r\nclass Header extends React.Component {\r\n    // constructor (props) {\r\n    //   super(props);\r\n    //   this.state = {\r\n  \r\n    //   }\r\n    // }\r\n    render() {\r\n        return (\r\n            <header className=\"Header\">\r\n                <Logo />\r\n                <Nav />\r\n            </header>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Footer.scss';\r\n\r\nclass Footer extends React.Component {\r\n    // constructor (props) {\r\n    //   super(props);\r\n    //   this.state = {\r\n  \r\n    //   }\r\n    // }\r\n    render() {\r\n        return (\r\n            <footer className=\"Footer\">\r\n\r\n            </footer>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport './Home.scss';\r\n\r\nclass Home extends React.Component {\r\n    // constructor (props) {\r\n    //   super(props);\r\n    //   this.state = {\r\n  \r\n    //   }\r\n    // }\r\n    render() {\r\n        return (\r\n            <div className=\"Home\">\r\n                <div className=\"container\">\r\n                    <div className=\"item__left\">\r\n                        <p>Согласен, так себе дизайнер, но стараюсь как могу</p>\r\n                    </div>\r\n                    <div className=\"item__right\">\r\n                        <p>Описаниие для курса валют</p>\r\n                    </div>\r\n                    <div className=\"item__left\">\r\n                        <p>Описаниие для погоды</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport './Weather.scss';\r\n\r\nclass Weather extends React.Component {\r\n    // constructor (props) {\r\n    //   super(props);\r\n    //   this.state = {\r\n  \r\n    //   }\r\n    // }\r\n    render() {\r\n        return (\r\n            <div className=\"Weather\">\r\n                <div className=\"container\">\r\n                    \r\n                </div>\r\n            </div>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport './Currency.scss';\r\n\r\nclass Currency extends React.Component {\r\n    // constructor (props) {\r\n    //   super(props);\r\n    //   this.state = {\r\n  \r\n    //   }\r\n    // }\r\n    render() {\r\n        return (\r\n            <div className=\"Currency\">\r\n                Currency\r\n            </div>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default Currency;","import React from 'react';\r\nimport './Other.scss';\r\n\r\nclass Other extends React.Component {\r\n    // constructor (props) {\r\n    //   super(props);\r\n    //   this.state = {\r\n  \r\n    //   }\r\n    // }\r\n    render() {\r\n        return (\r\n            <div className=\"Other\">\r\n                404 not found and bad smile\r\n            </div>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default Other;","import React from 'react';\nimport './App.scss';\n\nimport {Route, Switch} from 'react-router-dom';\n\nimport Header from '../Header/Header';\nimport Footer from '../Footer/Footer';\nimport Home from '../Home/Home';\nimport Weather from '../Weather/Weather';\nimport Currency from '../Currency/Currency';\nimport Other from '../Other/Other';\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        {/* <div className=\"App__wrap\"> */}\n          <Header />\n          <main>\n              <Switch>\n                <Route exact path=\"/\" component={Home} />\n                <Route exact path=\"/weather\" component={Weather} />\n                <Route exact path=\"/currency\" component={Currency} />\n                <Route component={Other} />\n              </Switch>\n          </main>\n          <Footer />\n        {/* </div> */}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(<BrowserRouter> <App /> </BrowserRouter> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}